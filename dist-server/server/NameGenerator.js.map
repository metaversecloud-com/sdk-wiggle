{"version":3,"file":"NameGenerator.js","names":["name_set","chain_cache","general","require","generate_name","type","chain","markov_chain","markov_name","name_list","n_of","list","i","push","construct_chain","length","names","split","incr_chain","j","name","c","substr","string","last_c","scale_chain","key","token","table_len","count","weighted","Math","floor","pow","parts","select_link","name_len","join","len","idx","random","t","module","exports"],"sources":["../../src/server/NameGenerator.js"],"sourcesContent":["\"use strict\";\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// name_generator.js\n// written and released to the public domain by drow <drow@bin.sh>\n// http://creativecommons.org/publicdomain/zero/1.0/\n\nvar name_set = {};\nvar chain_cache = {};\n\nname_set.general = require(\"./NameSet\");\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// generator function\n\nfunction generate_name(type) {\n  var chain;\n  if ((chain = markov_chain(type))) {\n    return markov_name(chain);\n  }\n  return \"\";\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// generate multiple\n\nfunction name_list(type, n_of) {\n  var list = [];\n\n  var i;\n  for (i = 0; i < n_of; i++) {\n    list.push(generate_name(type));\n  }\n  return list;\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// get markov chain by type\n\nfunction markov_chain(type) {\n  var chain;\n  if ((chain = chain_cache[type])) {\n    return chain;\n  } else {\n    var list;\n    if ((list = name_set[type])) {\n      var chain;\n      if ((chain = construct_chain(list))) {\n        chain_cache[type] = chain;\n        return chain;\n      }\n    }\n  }\n  return false;\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// construct markov chain from list of names\n\nfunction construct_chain(list) {\n  var chain = {};\n\n  var i;\n  for (i = 0; i < list.length; i++) {\n    var names = list[i].split(/\\s+/);\n    chain = incr_chain(chain, \"parts\", names.length);\n\n    var j;\n    for (j = 0; j < names.length; j++) {\n      var name = names[j];\n      chain = incr_chain(chain, \"name_len\", name.length);\n\n      var c = name.substr(0, 1);\n      chain = incr_chain(chain, \"initial\", c);\n\n      var string = name.substr(1);\n      var last_c = c;\n\n      while (string.length > 0) {\n        var c = string.substr(0, 1);\n        chain = incr_chain(chain, last_c, c);\n\n        string = string.substr(1);\n        last_c = c;\n      }\n    }\n  }\n  return scale_chain(chain);\n}\nfunction incr_chain(chain, key, token) {\n  if (chain[key]) {\n    if (chain[key][token]) {\n      chain[key][token]++;\n    } else {\n      chain[key][token] = 1;\n    }\n  } else {\n    chain[key] = {};\n    chain[key][token] = 1;\n  }\n  return chain;\n}\nfunction scale_chain(chain) {\n  var table_len = {};\n\n  var key;\n  for (key in chain) {\n    table_len[key] = 0;\n\n    var token;\n    for (let token in chain[key]) {\n      var count = chain[key][token];\n      var weighted = Math.floor(Math.pow(count, 1.3));\n\n      chain[key][token] = weighted;\n      table_len[key] += weighted;\n    }\n  }\n  chain[\"table_len\"] = table_len;\n  return chain;\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// construct name from markov chain\n\nfunction markov_name(chain) {\n  var parts = select_link(chain, \"parts\");\n  var names = [];\n\n  var i;\n  for (i = 0; i < parts; i++) {\n    var name_len = select_link(chain, \"name_len\");\n    var c = select_link(chain, \"initial\");\n    var name = c;\n    var last_c = c;\n\n    while (name.length < name_len) {\n      c = select_link(chain, last_c);\n      name += c;\n      last_c = c;\n    }\n    names.push(name);\n  }\n  return names.join(\" \");\n}\nfunction select_link(chain, key) {\n  var len = chain[\"table_len\"][key];\n  var idx = Math.floor(Math.random() * len);\n\n  var t = 0;\n  for (let token in chain[key]) {\n    t += chain[key][token];\n    if (idx < t) {\n      return token;\n    }\n  }\n  return \"-\";\n}\n\nmodule.exports = generate_name;\n"],"mappings":"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"}